<?php
/**
 * @file
 * Code for the Camp BoF Schedule feature.
 */

include_once 'camp_bof_schedule.features.inc';

function template_preprocess_camp_bof_schedule_grid(&$vars) {
  $view     = $vars['view'];

  // We need the raw data for this grouping, which is passed in as $vars['rows'].
  // However, the template also needs to use for the rendered fields.  We
  // therefore swap the raw data out to a new variable and reset $vars['rows']
  // so that it can get rebuilt.
  // Store rows so that they may be used by further preprocess functions.
  $result   = $vars['result'] = $vars['rows'];
  $vars['rows'] = array();
  $vars['field_classes'] = array();

  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  $row_class_special = isset($options['row_class_special']) ? $options['row_class_special'] : TRUE;

  $fields   = &$view->field;

  $active   = !empty($handler->active) ? $handler->active : '';

  // Some hard-coded mappings for now.
  $class_mapping = array(
    'title_1' => 'room-name',
    'title' => 'title',
    'field_slot_datetime' => 'time-slot',
  );

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = $handler->render_fields($result);
  
  $rooms = array();
  $rows = array();
  // Find all possible rooms, construct a template array.
  foreach ($renders as $num => $rf) { // drupal_set_message(print_r($rf,1));
    // title_1 is the title of the back-referenced room node :(
    $rooms[$rf['title_1']] = array('class' => array('empty'), 'sort' => $rf);
    // Set up our rows - they should already be in the desired order by time.
    $rows[$rf['field_slot_datetime']] = array('time' => array('header' => TRUE, 'data' => $rf['field_slot_datetime'], 'class' => array($class_mapping['field_slot_datetime'])));
  }

  uasort($rooms, 'camp_schedule_sort');
  foreach ($rooms as $idx => $r) {
    unset($rooms[$idx]['sort']);
  }
  $vars['header'] = array_merge(array(array('class' => array('time-header'))), array_keys($rooms));
  // Set up each time slot with a list of empty rooms.
  foreach ($rows as $time => $row) {
    $rows[$time] = $row + $rooms;
  }
  // Populate CSS identifiers.
  foreach ($fields as $field => $info) {
    $vars['fields'][$field] = drupal_clean_css_identifier($field);
  }

  foreach ($renders as $num => $rf) {
    $cell = &$rows[$rf['field_slot_datetime']][$rf['title_1']];
    unset($cell['class']);
    unset($cell['sort']);
    unset($rf['field_slot_datetime']);
    $strings = array();
    foreach ($rf as $field => $field_output) {
      // Add field classes
      $field_classes = $class_mapping[$field];
      if ($fields[$field]->options['element_default_classes']) {
        $field_classes .= " views-field views-field-" . $vars['fields'][$field];
      }
      if (in_array($field, array('field_track', 'field_experience'))) {
        $field_classes .= " " . drupal_clean_css_identifier(drupal_strtolower($field_output));
      }

      if ($field_output && !empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $element_type = $fields[$field]->element_type(TRUE, TRUE);
        if ($element_type) {
          $field_output = '<' . $element_type . ' class="' .$field_classes. '">' . $field_output . '</' . $element_type . '>';
        }

        $strings[]= $field_output;
      }
    }
    // Wrap all elements except the 1st in a DIV.
    // This is a bit of a hack for the room name which is
    // first in the View and is hidden in the gird.
    $cell['data']['room_name']['#markup'] = array_shift($strings);
    if (empty($cell['data']['sessions'])) {
      $cell['data']['sessions'] = array();
    }
    // Hack - make sure it's published.
    if (!empty($rf['status'])) {
      $cell['data']['sessions'][] = array(
        '#prefix' => "\n<div class=\"session-details ". drupal_clean_css_identifier($rf['type']) .'">',
        '#markup' => implode("\n", $strings),
        '#suffix' => "</div>",
      );
    }
    // Check access to add a BoF
    if (user_access('create bof_session content')) {
      $cell['data']['add_bof'] = array('#markup' => $rf['item_id']);
      // Remove the link if it's at capacity.  This is a hack, since
      // the field collection limit on capacity doesn't really work.
      if (count($cell['data']['sessions']) >= $rf['field_slot_types_capacity']) {
        unset($cell['data']['add_bof']);
      }
    }
  }

  // Strip out the string indexes.
  $vars['rows'] = array_values($rows);
  $count = 0;
  foreach ($vars['rows'] as $num => $row) {
    $vars['row_classes'][$num] = array();
    if ($row_class_special) {
      $vars['row_classes'][$num][] = ($count++ % 2 == 0) ? 'odd' : 'even';
    }
  }

  if ($row_class_special) {
    $vars['row_classes'][0][] = 'views-row-first';
    $vars['row_classes'][count($vars['row_classes']) - 1][] = 'views-row-last';
  }

  $vars['classes_array'] = array('camp-schedule-grid');
  if (empty($vars['rows']) && !empty($options['empty_table'])) {
    $vars['rows'][0][0] = $view->display_handler->render_area('empty');
    // Calculate the amounts of rows with output.
    $vars['field_attributes'][0][0]['colspan'] = count($vars['header']);
    $vars['field_classes'][0][0] = 'views-empty';
  }

  $vars['classes_array'][] = 'cols-'. count($vars['header']);

  // Add the summary to the list if set.
  if (!empty($handler->options['summary'])) {
    $vars['attributes_array'] = array('summary' => filter_xss_admin($handler->options['summary']));
  }

  // Add the caption to the list if set.
  if (!empty($handler->options['caption'])) {
    $vars['caption'] = filter_xss_admin($handler->options['caption']);
  }
  else {
    $vars['caption'] = '';
  }
}

