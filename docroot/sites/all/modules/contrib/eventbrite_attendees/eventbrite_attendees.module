<?php

/**
 * Implements hook_menu().
 */
function eventbrite_attendees_menu() {
  $items = array();
  $items['admin/config/content/eventbrite-attendees'] = array(
    'title' => 'Eventbrite Configuration',
    'description' => 'Set API keys and data mappings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_attendees_configure_form'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/reports/eventbrite-attendees'] = array(
    'title' => 'Eventbrite Full Data',
    'description' => 'See Full Attendee data',
    'page callback' => 'eventbrite_attendees_report',
    'access arguments' => array('access site reports'),
  );
  $items['admin/reports/eventbrite-attendees/csv'] = array(
    'title' => 'Eventbrite CSV',
    'description' => 'Export Attendee data',
    'page callback' => 'eventbrite_attendees_csv_export',
    'access arguments' => array('access site reports'),
    'type' => MENU_CALLBACK,
  );
  $items['eventbrite/attendees'] = array(
    'title' => 'Event attendees',
    'page callback' => 'eventbrite_attendees_listing',
    'access arguments' => array('access content'),
  );
  $items['eventbrite/webhook/%'] = array(
    'title' => 'Eventbrite Webhook',
    'page callback' => 'eventbrite_attendees_webhook',
    'access callback' => 'eventbrite_attendees_webhook_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Helper function to extract the questions and choices from data.
 */
function _eventbrite_attendees_get_questions($data) {
  $question_choices = array();
  $questions = array();
  $opt_out_id = variable_get('eventbrite_attendees_opt_out_id', '');
  // pre-analyze questions
  if (isset($data->attendees) && is_array($data->attendees)) {
    foreach ($data->attendees as $a) {
      if (is_array($a->attendee->answers)) {
        foreach ($a->attendee->answers as $ans) {
          // We don't need to see opt-out here.
          if ($ans->answer->question_id == $opt_out_id && !empty($ans->answer->answer_text)) {
            continue;
          }
          $questions[$ans->answer->question_id] = $ans->answer->question;
          if ($ans->answer->question_type == "multiple choice") {
            if (!isset($question_choices[$ans->answer->question_id])) {
              $question_choices[$ans->answer->question_id] = array();
            }
            $choices = explode(' | ', $ans->answer->answer_text);
            foreach ($choices as $c) {
              if (!isset($question_choices[$ans->answer->question_id][$c])) {
                $question_choices[$ans->answer->question_id][$c] = 0;
              }
              $question_choices[$ans->answer->question_id][$c]++;
            }
          }
        }
      }
    }
  }
  return array($questions, $question_choices);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_attendees_report() {
  $data = eventbrite_attendees_fetch();
  list($questions, $question_choices) = _eventbrite_attendees_get_questions($data);

  $output = '';

  $header = array(t('Name'), t('Company'), t('Website'), t('Email'), t('Amount paid'));
  foreach ($questions as $id => $q) {
    $header[] = truncate_utf8(check_plain($q), 30, TRUE, TRUE);
  }

  $rows = array();

  if (isset($data->attendees) && is_array($data->attendees)) {
    foreach ($data->attendees as $a) {

      if (!is_array($a->attendee->answers)) {
        $a->attendee->answers = array();
      }
      $attendee_answers = array();
      foreach ($a->attendee->answers as $ans) {
        $attendee_answers[$ans->answer->question_id] = $ans->answer;
      }

      $row = array();
      $row[] = check_plain($a->attendee->first_name) . ' ' . check_plain($a->attendee->last_name);
      $row[] = !empty($a->attendee->company) ? check_plain($a->attendee->company) : '';
      $row[] = !empty($a->attendee->website) ? l($a->attendee->website, $a->attendee->website) : '';
      $row[] = !empty($a->attendee->email) ? check_plain($a->attendee->email) : '';
      $row[] = isset($a->attendee->amount_paid) ? check_plain($a->attendee->amount_paid) : '';
      foreach ($questions as $id => $q) {
        $row[] = isset($attendee_answers[$id]) ? check_plain($attendee_answers[$id]->answer_text) : '';
      }
      $rows[] = $row;
    }
  }
  $output .= "<h3>" .  t('Answer summary') . "</h3>\n";
  $output .= "<dl>\n";
  foreach ($question_choices as $id => $choices) {
    $output .= "<dt>" . check_plain($questions[$id]) . "</dt>\n";
    foreach ($choices as $choice => $count) {
      $output .= "<dd>" . check_plain($choice) . " : $count </dd>\n";
    }
  }
  $output .= "</dl>\n";
  $output .= "<p>" . l(t('Export CSV'), 'admin/reports/eventbrite-attendees/csv') . "</p>\n";
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array(), 'caption' => t('All Attendees')));

  return $output;
}

/**
 * Page callback to download a CSV file with all attendee data.
 */
function eventbrite_attendees_csv_export() {
  $data = eventbrite_attendees_fetch();
  list($questions, $question_choices) = _eventbrite_attendees_get_questions($data);

  $output = '';

  $header = array(t('First Name'), t('Last Name'), t('Company'), t('Website'), t('Email'), t('Amount paid'));
  foreach ($questions as $id => $q) {
    $header[] = truncate_utf8(check_plain($q), 30, TRUE, TRUE);
  }
  // Send response headers to the browser
  header('Content-Type: text/csv' );
  header('Content-Disposition: attachment;filename=eventbrite_attendees-' . date('Y-m-d') . '.csv');
  $fp = fopen('php://output', 'w');
  fputcsv($fp, $header);
  if (isset($data->attendees) && is_array($data->attendees)) {
    foreach ($data->attendees as $a) {

      if (!is_array($a->attendee->answers)) {
        $a->attendee->answers = array();
      }
      $attendee_answers = array();
      foreach ($a->attendee->answers as $ans) {
        $attendee_answers[$ans->answer->question_id] = $ans->answer;
      }
      $row = array();
      $row[] = ucfirst($a->attendee->first_name);
      $row[] = ucfirst($a->attendee->last_name);
      $row[] = !empty($a->attendee->company) ? $a->attendee->company : '';
      $row[] = !empty($a->attendee->website) ? $a->attendee->website : '';
      $row[] = !empty($a->attendee->email) ? $a->attendee->email : '';
      $row[] = isset($a->attendee->amount_paid) ? $a->attendee->amount_paid : '';
      foreach ($questions as $id => $q) {
        $row[] = isset($attendee_answers[$id]) ? $attendee_answers[$id]->answer_text : '';
      }
      fputcsv($fp, $row);
    }
  }
  fclose($fp);
  exit();
}


/**
 * Form builder for configuration form.
 */
function eventbrite_attendees_configure_form($form, &$form_state) {
  $form['basic'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic configuration'),
  );
  $form['basic']['eventbrite_attendees_user_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Eventbrite User key'),
    '#default_value' => variable_get('eventbrite_attendees_user_key', ''),
    '#description' => t('The unique string assigned by Eventbrite which identifies the user making an API call.'),
    '#required' => TRUE,
  );
  $form['basic']['eventbrite_attendees_app_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Eventbrite Application key'),
    '#default_value' => variable_get('eventbrite_attendees_app_key', ''),
    '#description' => t('The Eventbrite Application key for API calls (identifies this site).'),
    '#required' => TRUE,
  );
  $form['basic']['eventbrite_attendees_event_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Eventbrite Event Id'),
    '#default_value' => variable_get('eventbrite_attendees_event_id', ''),
    '#description' => t('The Eventbrite event ID for the event whose attendees you want to list.'),
    '#required' => TRUE,
  );
  $form['webhook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webhook configuration'),
  );
  $form['webhook']['eventbrite_attendees_webhook_url'] = array(
    '#type' => 'markup',
    '#title' => t('Eventbrite Webhook URL'),
    '#markup' => url('eventbrite/webhook/' . eventbrite_attendees_get_webhook_token(), array('absolute' => TRUE)),
  );
  $form['additional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional configuration'),
  );
  $form['additional']['eventbrite_attendees_opt_out_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Eventbrite Opt Out Question Id'),
    '#default_value' => variable_get('eventbrite_attendees_opt_out_id', ''),
    '#description' => t('The Eventbrite question ID for the checkbox where the user may opt out of being listed.'),
  );
  $form['additional']['eventbrite_attendees_username_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Eventbrite Drupal.org username Question Id'),
    '#default_value' => variable_get('eventbrite_attendees_username_id', ''),
    '#description' => t('The Eventbrite question ID where attendess may enter their drupal.org username.'),
  );
  $form['additional']['eventbrite_attendees_sponsor_ticket_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Eventbrite Individual Sponsor Ticket Id'),
    '#default_value' => variable_get('eventbrite_attendees_sponsor_ticket_id', ''),
    '#description' => t('The Eventbrite ticket ID purchased by individual sponsors.'),
  );
  $form = system_settings_form($form);
  $form['#submit'][] = 'eventbrite_attendees_cache_clear';
  return $form;
}

/**
 * Clear cache entries.
 */
function eventbrite_attendees_cache_clear() {
  cache_clear_all('eventbrite_attendees:', 'cache', TRUE);
}

/**
 * Fetch and cache data from Eventbrite.
 */
function eventbrite_attendees_fetch() {
  $user_key = variable_get('eventbrite_attendees_user_key', '');
  $app_key = variable_get('eventbrite_attendees_app_key', '');
  $event_id = variable_get('eventbrite_attendees_event_id', '');
  if (empty($user_key) || empty($app_key) || empty($event_id)) {
    // Empty data.
    return array();
  }
  $data = NULL;
  $cid = 'eventbrite_attendees:event_list_attendees';
  $cache = cache_get($cid);
  if ($cache && isset($cache->data)) {
    $data = $cache->data;
  }
  if (!isset($data)) {
    $base_url = 'https://www.eventbrite.com/json/event_list_attendees?';
    $query = array();
    $query['page'] = 0;
    $query['id'] = $event_id;
    $query['app_key'] = $app_key;
    $query['user_key'] = $user_key;
    $url = $base_url . drupal_http_build_query($query);
    $result = drupal_http_request($url);
    $data = $result->data;
    if ($result->code == 200) {
      cache_set($cid, $data, 'cache', CACHE_TEMPORARY);
    }
  }
  return json_decode($data);
}

/**
 * Page callback to display atendees.
 */
function eventbrite_attendees_listing() {
  // Flag for when we want to add RDFa
  $rdf = function_exists('rdf_get_namespaces');
  $data = eventbrite_attendees_fetch();
  $output = '';
  $header = array(t('Name'), t('Company'), t('Website'));
  $sponsor_rows = array();
  $rows = array();
  $opt_out_id = variable_get('eventbrite_attendees_opt_out_id', '');
  $username_id = variable_get('eventbrite_attendees_username_id', '');
  if ($username_id) {
    $header[] = t('Drupal.org username');
  }
  $sponsor_ticket_id = variable_get('eventbrite_attendees_sponsor_ticket_id', '');
  $total_attendees = 0;
  $listed_attendees = 0;
  if (isset($data->attendees) && is_array($data->attendees)) {
    foreach ($data->attendees as $a) {
      $opt_out = FALSE;
      $username = '';
      if (is_array($a->attendee->answers)) {
        foreach ($a->attendee->answers as $ans) {
          if ($ans->answer->question_id == $opt_out_id && !empty($ans->answer->answer_text)) {
            $opt_out = TRUE;
          }
          if ($ans->answer->question_id == $username_id && !empty($ans->answer->answer_text)) {
            $username = $ans->answer->answer_text;
          }
        }
      }
      $total_attendees++;
      if ($opt_out) {
        continue;
      }
      $listed_attendees++;
      $row = array('data' => array());
      if ($rdf) {
        $row['typeof'] = "schema:Person";
      }
      $cell = array('data' => check_plain($a->attendee->first_name) . ' ' . check_plain($a->attendee->last_name));
      if ($rdf) {
        $cell['property'] = "schema:name";
      }
      $row['data'][] = $cell;
      $cell = array();
      if (!empty($a->attendee->company)) {
        $cell['data'] = check_plain($a->attendee->company);
        if ($rdf) {
          $cell['property'] = "schema:affiliation";
        }
      }
      $row['data'][] = $cell;
      $cell = array();
      if (!empty($a->attendee->website)) {
        $attributes = array();
        if ($rdf) {
          $attributes['rel'] = "schema:url";
         }
         // Make sure the website URL is properly formed.
         preg_match('@(https?://){0,1}(.+)@', $a->attendee->website, $m);
         if (!$m[1]) {
           $m[1] = 'http://';
         }
         $cell['data'] = l(rtrim($m[2], '/'), $m[1] . $m[2], array('attributes' => $attributes));
      }
      $row['data'][] = $cell;
      if ($username_id) {
        $cell = array();
        $cell['data'] = $username;
        if ($rdf && $username) {
          $cell['property'] = "foaf:nick";
        }
        $row['data'][] = $cell;
      }
      if ($sponsor_ticket_id && $sponsor_ticket_id == $a->attendee->ticket_id) {
        $sponsor_rows[] = $row;
      }
      else {
        $rows[] = $row;
      }
    }
  }
  if ($sponsor_rows) {
    $output .= theme('table', array('header' => $header, 'rows' => $sponsor_rows, 'attributes' => array(), 'caption' => t('Individual Sponsor attendees')));
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array(), 'caption' => t('Regular Attendees')));
  $output .= '<p>' . t('@total registered attendees (@listed listed)', array('@total' => $total_attendees, '@listed' => $listed_attendees)) . '</p>';
  return $output;
}

/**
 * Implements hook_rdf_namespaces().
 */
function eventbrite_attendees_rdf_namespaces() {
  return array(
    'schema'  => 'http://schema.org/',
  );
}

function eventbrite_attendees_webhook() {

}

function eventbrite_attendees_webhook_access($token) {
  return $token === eventbrite_attendees_get_webhook_token();
}

function eventbrite_attendees_get_webhook_token() {
  if (!($key = variable_get('eventbrite_attendees_webhook_token', 0))) {
    $key = drupal_random_key();
    variable_set('eventbrite_attendees_webhook_token', $key);
  }
  return $key;
}